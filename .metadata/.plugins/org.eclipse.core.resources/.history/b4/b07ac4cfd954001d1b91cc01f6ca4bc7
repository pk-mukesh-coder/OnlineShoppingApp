package com.mukesh.resource;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.client.RestTemplate;

import com.mukesh.dto.SalesOrderDTO;
import com.mukesh.service.SalesOrderService;
import com.netflix.appinfo.InstanceInfo;
import com.netflix.discovery.EurekaClient;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RequestMapping("/orders")
@RestControllerAdvice
@RestController
@RefreshScope
public class SalesOrderResource {

	private static final Logger LOG = LoggerFactory.getLogger(SalesOrderResource.class);

	
	@Autowired
	private RestTemplateBuilder tmplt;
	
	@Autowired
	private EurekaClient clnt;
	
	//Here we are perform hystrix for circuit breaker
	@RequestMapping("/hystrix")
	@HystrixCommand(fallbackMethod="fallbackGreeting")
	public String callServiceClass() {
		RestTemplate rst=tmplt.build();
		InstanceInfo inst=clnt.getNextServerFromEureka("customer-service", false);
		String url=inst.getHomePageUrl();
		ResponseEntity<String> rsp=rst.exchange(url, HttpMethod.GET, null, String.class);
		return rsp.getBody();
	}
	
	public String fallbackGreeting() {
		System.out.println("Response from fallback method");
		return "Hello from fallback method";
	}
	
	
	@Value("${sales.test}")
	private String test;
	
	//config -server-profile
		@GetMapping("/test")
		public String test() {
			return test;
		}
		

	
	
	@Autowired
	private SalesOrderService salesOrderService;

	@ResponseStatus(HttpStatus.OK)
	@GetMapping("/")
	public List<SalesOrderDTO> all() {
		return salesOrderService.all();
	}

	@ResponseStatus(HttpStatus.OK)
	@GetMapping("/{id}")
	public SalesOrderDTO get(@PathVariable long id) {
		return salesOrderService.get(id);
	}

	@ResponseStatus(HttpStatus.OK)
	@PutMapping("/{id}")
	public SalesOrderDTO put(@PathVariable long id, @RequestBody SalesOrderDTO salesOrderDTO) {
		salesOrderDTO.setId(id);
		return salesOrderService.save(salesOrderDTO);
	}

	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable long id) {
		salesOrderService.delete(id);
	}

	@PostMapping("/")
	@ResponseStatus(HttpStatus.CREATED)
	public SalesOrderDTO add(@RequestBody SalesOrderDTO salesOrderDTO) {
		return salesOrderService.save(salesOrderDTO);
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<?> handleException(Throwable ex) {
		LOG.error("There was an error: ", ex);
		// Add conditional logic to show differnt status on different exceptions
		return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	}

}
